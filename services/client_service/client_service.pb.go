// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/client_service/client_service.proto

package chord

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("services/client_service/client_service.proto", fileDescriptor_73cdb0b12f50e91e)
}

var fileDescriptor_73cdb0b12f50e91e = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x29, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x89, 0x87, 0xf2, 0xd1, 0xb8,
	0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0xc9, 0x19, 0xf9, 0x45, 0x29, 0x52, 0xba, 0x04,
	0x34, 0xe5, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x16, 0x43, 0x74, 0x19, 0xb9, 0x70, 0xf1, 0x3a,
	0x83, 0x25, 0x82, 0x21, 0xca, 0x84, 0x8c, 0xb9, 0xb8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0xdc, 0x32, 0x73, 0x52, 0x85, 0x84, 0xf5, 0xc0, 0xc6, 0xea, 0x81, 0x38, 0xbe, 0xa9, 0x25, 0x89,
	0x29, 0x89, 0x25, 0x89, 0x52, 0xfc, 0x50, 0xc1, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0xd4,
	0x24, 0x36, 0xb0, 0x61, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xf1, 0xd8, 0xaf, 0xb2,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientServiceClient interface {
	RequestFile(ctx context.Context, in *FileMetadata, opts ...grpc.CallOption) (*Response, error)
}

type clientServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientServiceClient(cc *grpc.ClientConn) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) RequestFile(ctx context.Context, in *FileMetadata, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/chord.ClientService/RequestFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
type ClientServiceServer interface {
	RequestFile(context.Context, *FileMetadata) (*Response, error)
}

// UnimplementedClientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (*UnimplementedClientServiceServer) RequestFile(ctx context.Context, req *FileMetadata) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFile not implemented")
}

func RegisterClientServiceServer(s *grpc.Server, srv ClientServiceServer) {
	s.RegisterService(&_ClientService_serviceDesc, srv)
}

func _ClientService_RequestFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).RequestFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.ClientService/RequestFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).RequestFile(ctx, req.(*FileMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chord.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestFile",
			Handler:    _ClientService_RequestFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/client_service/client_service.proto",
}
